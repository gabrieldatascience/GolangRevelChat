// Generated by CoffeeScript 1.6.2
(function() {
  var Message, Room, TextMessage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    Room.checkWs();
    window.room = new Room("ws://" + window.location.host + window.location.pathname + "/chatting");
    room.ws_conn.onopen = room.joinRoom();
    room.ws_conn.onmessage = function(e) {
      return room.reveiveMessage(e);
    };
    $('#sayit-button').click(function() {
      var sMessage, text;

      text = $('#chat-form').val();
      if (text) {
        sMessage = new Message("text", text);
        return room.sendMessage(sMessage);
      } else {

      }
    });
    return $('#chat-form').keydown(function(e) {
      var sMessage, text;

      if (e.ctrlKey && e.keyCode === 13) {
        text = $('#chat-form').val();
        sMessage = new Message("text", text);
        return room.sendMessage(sMessage);
      }
    });
  });

  Room = (function() {
    function Room(ws_url) {
      this.ws_url = ws_url;
      this.ws_conn = new WebSocket(this.ws_url);
      this.userlist = [];
    }

    Room.checkWs = function() {
      if (!window.WebSocket) {
        alert("you brower is not support websocket");
      }
    };

    Room.prototype.roomAddr = function() {
      return console.log(this.ws_url);
    };

    Room.prototype.joinRoom = function() {
      var message;

      return message = new Message("join", "" + (this.currentUser()) + " has join room");
    };

    Room.prototype.currentUser = function() {
      return $("#user-name").text();
    };

    Room.prototype.sendMessage = function(message) {
      if (!this.ws_conn) {
        return;
      }
      this.ws_conn.send(JSON.stringify(message));
      return $('#chat-form').val('');
    };

    Room.prototype.reveiveMessage = function(e) {
      var m, rMessage;

      m = $.parseJSON(e.data);
      if (m.Type === "join") {
        this.addUserToList(m.User);
      }
      if (m.Type === "leave") {
        this.removeUserFromList(m.User);
      }
      console.log(m);
      rMessage = new TextMessage(m.Type, m.Text, m.User);
      return rMessage.show();
    };

    Room.prototype.getUsersList = function() {
      var url,
        _this = this;

      url = window.location.pathname + "/users.json";
      $.getJSON(url, function(data) {
        if (data.Users !== null) {
          return _this.userlist = data.Users;
        }
      });
      return this.userlist;
    };

    Room.prototype.addUserToList = function(user) {
      var names;

      names = [];
      $("#userlist span").each(function() {
        return names.push($(this).text());
      });
      console.log(names);
      if (names.indexOf(user.Name) === -1) {
        return $("#userlist>ul").append($("<li><img src=" + user.Avatar + "/><span>" + user.Name + "</span></li>"));
      }
    };

    Room.prototype.removeUserFromList = function(user) {
      return $("#userlist span").each(function() {
        if ($(this).text() === user.Name) {
          return $(this).parent().remove();
        }
      });
    };

    return Room;

  })();

  Message = (function() {
    function Message(type, text) {
      this.type = type;
      this.text = text;
    }

    Message.prototype.autoUrl = function() {
      var url;

      url = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
      this.text = this.text.replace(url, "<a href=\"$1\" target='_blank'>$1</a>");
      return this;
    };

    Message.prototype.textWrap = function() {
      this.text = this.text.replace(/\n/g, "<br />");
      return this;
    };

    return Message;

  })();

  TextMessage = (function(_super) {
    __extends(TextMessage, _super);

    function TextMessage(type, text, user) {
      this.type = type;
      this.text = text;
      this.user = user;
    }

    TextMessage.prototype.show = function() {
      this.autoUrl();
      this.textWrap();
      return $('.chat-main').append(("<span class='message-avatar'><img src='" + this.user.Avatar + "'></span>[" + this.user.Name + "] ") + this.text + "<br>");
    };

    return TextMessage;

  })(Message);

}).call(this);
